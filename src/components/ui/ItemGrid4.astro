---
import { twMerge } from 'tailwind-merge';
import type { ItemGrid } from '~/types';
import Button from './Button.astro';
import { Icon } from 'astro-icon/components';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props as ItemGrid;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  list: listClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = '',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 md:gap-y-12 ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 grid-cols-1 place-items-center'
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, list, classes: itemClasses = {} }) => (
        <div class="sm:last:col-span-2">
          <div class={twMerge('flex flex-row max-w-md', panelClass, itemClasses?.panel)}>
            <div class="flex justify-center">
              {(icon || defaultIcon) && (
                <div class="size-16 mr-2 rtl:mr-0 rtl:ml-2">
                  <Fragment set:html={icon} />
                </div>
              )}
            </div>
            <div>
              {title && <h3 class={twMerge('text-xl font-bold', titleClass, itemClasses?.title)}>{title}</h3>}
              {description && (
                <p
                  class={twMerge(`${title ? 'mt-3' : ''} text-muted`, descriptionClass, itemClasses?.description)}
                  set:html={description}
                />
              )}
              {list &&
                list.map((item) => (
                  <div class="flex">
                    <Icon
                      name="tabler:check"
                      class={
                        'mr-2 min-w-5 mt-1 rtl:mr-0 rtl:ml-2 flex h-5 w-5 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1'
                      }
                    />
                    <p class={twMerge(`mt-1 text-muted`, listClass, itemClasses?.list)} set:html={item} />
                  </div>
                ))}
              {callToAction && (
                <div class={twMerge(`${title || description ? 'mt-3' : ''}`, actionClass, itemClasses?.actionClass)}>
                  <Button variant="link" {...callToAction} />
                </div>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
